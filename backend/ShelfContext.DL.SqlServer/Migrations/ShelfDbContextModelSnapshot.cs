// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShelfContext.DL.SqlServer;

#nullable disable

namespace ShelfContext.DL.SqlServer.Migrations
{
    [DbContext(typeof(ShelfDbContext))]
    partial class ShelfDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShelfContext.Domain.Entities.BookTags.BookTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShelvedBookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShelvedBookId");

                    b.HasIndex("TagId");

                    b.ToTable("BookTags");
                });

            modelBuilder.Entity("ShelfContext.Domain.Entities.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("Books", (string)null);
                });

            modelBuilder.Entity("ShelfContext.Domain.Entities.ShelvedBooks.ShelvedBook", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateShelved")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShelfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ShelfId");

                    b.HasIndex("UserId", "BookId")
                        .IsUnique();

                    b.ToTable("ShelvedBooks");
                });

            modelBuilder.Entity("ShelfContext.Domain.Entities.Shelves.Shelf", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "ShelfContext.Domain.Entities.Shelves.Shelf.Name#ShelfName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("Name");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Shelves");
                });

            modelBuilder.Entity("ShelfContext.Domain.Entities.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ShelfContext.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("Users", (string)null);
                });

            modelBuilder.Entity("ShelfContext.Domain.Entities.BookTags.BookTag", b =>
                {
                    b.HasOne("ShelfContext.Domain.Entities.ShelvedBooks.ShelvedBook", null)
                        .WithMany("_bookTags")
                        .HasForeignKey("ShelvedBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShelfContext.Domain.Entities.Tags.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShelfContext.Domain.Entities.ShelvedBooks.ShelvedBook", b =>
                {
                    b.HasOne("ShelfContext.Domain.Entities.Books.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShelfContext.Domain.Entities.Shelves.Shelf", null)
                        .WithMany()
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShelfContext.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShelfContext.Domain.Entities.Shelves.Shelf", b =>
                {
                    b.HasOne("ShelfContext.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShelfContext.Domain.Entities.Tags.Tag", b =>
                {
                    b.OwnsOne("ShelfContext.Domain.Entities.Tags.TagName", "Name", b1 =>
                        {
                            b1.Property<Guid>("TagId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("Name");

                            b1.HasKey("TagId");

                            b1.ToTable("Tags");

                            b1.WithOwner()
                                .HasForeignKey("TagId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("ShelfContext.Domain.Entities.ShelvedBooks.ShelvedBook", b =>
                {
                    b.Navigation("_bookTags");
                });
#pragma warning restore 612, 618
        }
    }
}
