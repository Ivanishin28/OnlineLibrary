// <auto-generated />
using System;
using BookContext.DL.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookContext.DL.SqlServer.Migrations
{
    [DbContext(typeof(BookDbContext))]
    [Migration("20251026111750_AddBookMetadata")]
    partial class AddBookMetadata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookContext.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookContext.Domain.Entities.AuthorMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("AuthorMetadatas");
                });

            modelBuilder.Entity("BookContext.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookContext.Domain.Entities.BookAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId", "AuthorId")
                        .IsUnique();

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("BookContext.Domain.Entities.BookMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("PublishingDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("BookMetadatas");
                });

            modelBuilder.Entity("BookContext.Domain.Entities.Author", b =>
                {
                    b.OwnsOne("BookContext.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("AuthorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("MiddleName");

                            b1.HasKey("AuthorId");

                            b1.ToTable("Authors");

                            b1.WithOwner()
                                .HasForeignKey("AuthorId");
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("BookContext.Domain.Entities.AuthorMetadata", b =>
                {
                    b.HasOne("BookContext.Domain.Entities.Author", null)
                        .WithOne()
                        .HasForeignKey("BookContext.Domain.Entities.AuthorMetadata", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BookContext.Domain.ValueObjects.AuthorBiography", "Biography", b1 =>
                        {
                            b1.Property<Guid>("AuthorMetadataId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(5000)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Biography");

                            b1.HasKey("AuthorMetadataId");

                            b1.ToTable("AuthorMetadatas");

                            b1.WithOwner()
                                .HasForeignKey("AuthorMetadataId");
                        });

                    b.Navigation("Biography");
                });

            modelBuilder.Entity("BookContext.Domain.Entities.BookAuthor", b =>
                {
                    b.HasOne("BookContext.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookContext.Domain.Entities.Book", null)
                        .WithMany("BookTags")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookContext.Domain.Entities.BookMetadata", b =>
                {
                    b.HasOne("BookContext.Domain.Entities.Book", null)
                        .WithOne()
                        .HasForeignKey("BookContext.Domain.Entities.BookMetadata", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BookContext.Domain.ValueObjects.BookDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("BookMetadataId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(5000)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Description");

                            b1.HasKey("BookMetadataId");

                            b1.ToTable("BookMetadatas");

                            b1.WithOwner()
                                .HasForeignKey("BookMetadataId");
                        });

                    b.Navigation("Description");
                });

            modelBuilder.Entity("BookContext.Domain.Entities.Book", b =>
                {
                    b.Navigation("BookTags");
                });
#pragma warning restore 612, 618
        }
    }
}
